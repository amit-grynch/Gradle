import java.text.*

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
 

println ("Hello World now: " + sdf.format(new Date()))

sayHelloWorld()
void sayHelloWorld() {
	println "Hello world!InLine Method"
}

//return statement is optional 
//last statement will return the value and we can define the new value also
//bracket is optional in println
Integer doubleIt(Integer i) {
	println(i)
	i * 3
	Integer y = i
	i*9
}

println doubleIt(5)

def s1 = "a string"
def s2 = 'a string'
String s3="amit"

def s4="""amit
         is
         good
         boy"""

println s1
println s2
println (s3)
println s4

//String interpolation
def x = 4
println "x is $x"

def myCourse = "gradle"
println "I'm training in: ${myCourse.toUpperCase()}"

//Properties...

class Person {                       

    String name                      
    Integer age
    
   
     Person(name, age) {          
        this.name = name
        this.age = age
    }

}

def p = new Person("Fred", 35)
println p.age

p.age=67
println p.age+p.name


// with a Map

Map m = new HashMap()

m.put("foo", "Fred")
m.put("bar","jane");
m.put("baz","Dave");
println m.get("foo")
println m.get("bar")
println m.get("baz")

m.foo = "bill"
m.bar = "Jane"
m.baz = "Dave"

m.foo
m.bar
m.baz


println m.foo
println m.bar


////Closures

def echoIt = { println it }

//called like a normal method
println echoIt
println echoIt("amit closure")
echoIt("amit closure")


def echotIt2={ a,b,c ->
    println a
    println b
    println c
    7
    }
    
    println echotIt2("amit","kumar","sharma")
    
 def echoIt3={10}
 println(echoIt3)
 
    def oneArgMethod(closure) {
	closure() * 2
}

println oneArgMethod {10}



def twoArgMethod(factor, closure){
	closure() * factor
}

println twoArgMethod(3, {10})

twoArgMethod 5, {20}


//common uses for closure ... iterators!
for (int j in [1,2,3]){
	println j
}

[1,2,3].each {
	println it
}


// Closure resolution



class Person1 {                       

    String name = "Fred"                     
    
	Closure nameSayer = {
		println name
	}
}

def p1 = new Person1()
p1.nameSayer()

// Closed over a context
def theName = "John"
def sayName = {
	println theName
}
sayName()
theName = "Fred"
sayName()



class Person2 {                       

    String theName                      
    Integer theAge
    
   
     Person2(theName, theAge) {          
        this.theName = theName
        this.theAge = theAge
    }


	def executeInside(Closure c){
		c.delegate = this
		c()
	}

}

def p2 = new Person2("Fred", 35)
println p2.theName

p2.executeInside {println theName}

